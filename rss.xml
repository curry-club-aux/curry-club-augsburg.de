<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Curry Club Augsburg</title>
        <link>http://curry-club-augsburg.de</link>
        <description><![CDATA[Neuigkeiten vom Curry Club Augsburg]]></description>
        <atom:link href="http://curry-club-augsburg.de/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 11 Dec 2019 00:00:00 UT</lastBuildDate>
        <item>
    <title>Fünfter großer Haskell-Workshop des Curry Clubs Augsburg am 21. Dezember 2019</title>
    <link>http://curry-club-augsburg.de/posts/2019-12-11-fuenfter-workshop.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Fünfter großer Haskell-Workshop des Curry Clubs Augsburg am 21. Dezember 2019</h1>
    <div class="info">
      Gepostet am 11. Dez 19
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <div class="right">
<p><a href="/files/haskellworkshop-plakat5.pdf"> <img width="300" src="/files/haskellworkshop-plakat5.png" /> </a></p>
</div>
<p>Liebe Freundinnen der Sonne!</p>
<p>Wir, der Curry Club Augsburg, laden alle Interessierten herzlich zu unserem fünften <strong>Haskell-Workshop für Neulinge</strong> ein. Dieser findet am <strong>21. Dezember 2019</strong>, einem Samstag, von 10:00 Uhr bis 18:00 Uhr statt, aller Voraussicht nach im <strong>OpenLab Augsburg</strong>. Wie bei den vorherigen Malen ist die Teilnahme kostenlos.</p>
<p>Haskell ist eine wunderschöne Sprache, in der man nicht das “wie” spezifiziert, sondern das “was”. Ein Haskell-Programm besteht – anders als bei allen gewöhnlichen Programmiersprachen – nicht aus einer Folge von Anweisungen, welche von oben nach unten (und nur durch Kontrollstrukturen oder Subroutinen aufgelockert) abgearbeitet werden. Haskell-Code kann fast beliebig in seiner Reihenfolge permutiert werden, ohne die Bedeutung zu verändern. Ein ausführlicher Werbetext steht unten.</p>
<p>Zielgruppe des Workshops sind völlige Haskell-Neulinge. Teilnahmevoraussetzung ist entweder Erfahrung mit einer beliebigen anderen Programmiersprache oder Vertrautheit mit mathematisch/abstraktem Denken. Haskell-Profis sollten keinesfalls als Teilnehmende mitmachen, sondern lieber das Betreuendenteam verstärken.</p>
<p>Damit wir unsere Kapazität überblicken können, ist zur Teilnahme eine <a href="https://etherpad.wikimedia.org/p/haskell-workshop-2019">unverbindliche vorherige Anmeldung</a> nötig. Laptop mitbringen und vorab die <a href="https://www.haskell.org/platform/">Haskell Platform</a> installieren – Details dazu gibt es per Mail nach erfolgter Anmeldung.</p>
<p>Wir freuen uns auf euch!</p>
<p>Euer Team vom Curry Club</p>
<!--more-->
<blockquote>
<p>Was ist schneller als C++, prägnanter als Perl, regelmäßiger als Python, flexibler als Ruby, typisierter als C#, robuster als Java und hat absolut nichts mit PHP gemeinsam? Es ist Haskell!</p>
<p>Haskell ist eine moderne und innovative Programmiersprache, die sich von bekannten imperativen Sprachen in vielerlei Hinsicht deutlich unterscheidet: Ein Haskell-Programm besteht nicht etwa aus einer Abfolge von auszuführenden Anweisungen, sondern aus einer Ansammlung von Deklarationen, deren Reihenfolge keine Rolle spielt. Auch gibt es keine veränderlichen Variablen, und ausgewertet wird nur, was wirklich benötigt wird; unendliche Datenstrukturen sind möglich und sinnvoll.</p>
<p>Dieses Denkparadigma mag anfangs sehr ungewohnt sein, zieht jedoch eine Reihe von Vorteilen mit sich: Da es keine Nebenwirkungen wie beispielsweise globale Variablen gibt, kann man Code rein lokal verstehen. Damit wird es einfacher, modular Komponenten zusammenzubauen, sich Datenflüsse klarzumachen und Code auf seine Korrektheit hin zu überprüfen. Insbesondere vereinfacht sich die Programmierung mit Threads enorm.</p>
<p>Ferner ist Haskells starkes statisches Typsystem eine große Hilfe beim Programmieren und verhindert viel mehr Fehler schon während des Kompilierens, als man vielleicht aus anderen Sprachen gewohnt ist. Es gibt das Motto, dass, wenn Haskell-Code erst einmal erfolgreich durchkompiliere, er dann auch schon korrekt sei. Das ist sicherlich übertrieben, hat aber einen erstaunlich wahren Kern.</p>
<p>Beim Erlernen von Haskell lernt man viele neue Herangehensweisen kennen, die auch in anderen Sprachen nützlich sind; das ist einer der Hauptvorteile an Haskell, der auch dann noch relevant ist, wenn man aus verschiedenen Gründen im täglichen Leben nicht in Haskell programmieren möchte.</p>
</blockquote>
</article>
]]></description>
    <pubDate>Wed, 11 Dec 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-12-11-fuenfter-workshop.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Steht noch nicht fest, aber es wird bestimmt gut</title>
    <link>http://curry-club-augsburg.de/posts/2019-11-28-treffen-55.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Steht noch nicht fest, aber es wird bestimmt gut</h1>
    <div class="info">
      Gepostet am 28. Nov 19
      
          von diekmann
      
    </div>
    
    
  </header>

  <p>Vermutlich der letzte Curry Club vor dem Congress.</p>
</article>
]]></description>
    <pubDate>Thu, 28 Nov 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-11-28-treffen-55.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>HOL4-Virtualisierung und TypeScript</title>
    <link>http://curry-club-augsburg.de/posts/2019-10-03-treffen-54.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>HOL4-Virtualisierung und TypeScript</h1>
    <div class="info">
      Gepostet am  3. Okt 19
      
          von iblech
      
    </div>
    
    
  </header>

  <p>Makarius spricht ein paar Worte zu <a href="http://drops.dagstuhl.de/opus/volltexte/2019/11076/pdf/LIPIcs-ITP-2019-21.pdf">Virtualisierung von HOL4 in Isabelle</a>, und Tim stellt TypeScript vor.</p>
</article>
]]></description>
    <pubDate>Thu, 03 Oct 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-10-03-treffen-54.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Agda-Exempel und HOL4-Virtualisierung</title>
    <link>http://curry-club-augsburg.de/posts/2019-09-05-treffen-53.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Agda-Exempel und HOL4-Virtualisierung</h1>
    <div class="info">
      Gepostet am  5. Sep 19
      
          von iblech
      
    </div>
    
    
  </header>

  <p>Anton Lorenzen aus Bonn besucht uns. Er wird über seine Erfahrungen, ein <a href="https://github.com/algebraic-graphs/agda">nichttriviales Verifizierungsprojekt</a> in Agda durchzuführen, sprechen.</p>
<p>Zudem wird Makarius ein paar Worte zu <a href="http://drops.dagstuhl.de/opus/volltexte/2019/11076/pdf/LIPIcs-ITP-2019-21.pdf">Virtualisierung von HOL4 in Isabelle</a> sagen.</p>
</article>
]]></description>
    <pubDate>Thu, 05 Sep 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-09-05-treffen-53.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Row Types in Purescript und Large Mathematics Libraries</title>
    <link>http://curry-club-augsburg.de/posts/2019-08-08-treffen-52.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Row Types in Purescript und Large Mathematics Libraries</h1>
    <div class="info">
      Gepostet am  8. Aug 19
      
          von diekmann
      
    </div>
    
    
  </header>

  <p>Wir fangen an mit einem Vortrag von Profpatsch über Row Types in Purescript (30min–1h). Anschließend plaudern wir mit Makarius über “Large Mathematics Libraries” (gemeint ist natürlich “Formal Mathematics”).</p>
</article>
]]></description>
    <pubDate>Thu, 08 Aug 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-08-08-treffen-52.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Kants kategorischer Imperativ in Haskell</title>
    <link>http://curry-club-augsburg.de/posts/2019-06-06-treffen-51.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Kants kategorischer Imperativ in Haskell</h1>
    <div class="info">
      Gepostet am  6. Jun 19
      
          von iblech
      
    </div>
    
    
  </header>

  <p>Corny versucht es an etwas ganz Experimentellem: Kants kategorischem Imperativ in Haskell. Die absolute Erleuchtung ist noch nicht eingetreten, das Debugging und Modellieren macht aber Spaß.</p>
<p>Anschließend gibt Ingo eine kurze Einführung in die Multiversenphilosophie in der Mengenlehre.</p>
</article>
]]></description>
    <pubDate>Thu, 06 Jun 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-06-06-treffen-51.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Philosophie der Mathematik und Platonismus auf Steroiden</title>
    <link>http://curry-club-augsburg.de/posts/2019-05-16-treffen-50.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Philosophie der Mathematik und Platonismus auf Steroiden</h1>
    <div class="info">
      Gepostet am 16. Mai 19
      
          von iblech
      
    </div>
    
    
  </header>

  <p>Heute Abend gibt es leider keinen ausgearbeiteten Vortrag mit LaTeX-Beamer-Folien oder einer Demonstration innerhalb DES Systems (Isabelle), es sei denn, jemand hat noch unerwartet was in petto. Dann möge sie oder er aufrufen! :-)</p>
<p>Als Ersatz gibt es aber eine geführte Plauderrunde zur Philosophie der Mathematik. Ingo wird einen Überblick über folgende und verwandte Fragen geben. Sofern die Plauderrunde interessant wird, dann deswegen, weil es zu einer lebhaften Diskussion kommt.</p>
<ul>
<li><p>Sind mathematische Theoreme objektiv wahr? Was bedeutet das?</p></li>
<li><p>Was versteht man unter der Höhe und Breite eines mathematischen (Mengen-)Universums? Wie entfaltet sich aus der leeren Menge alles, was Mathematikerinnen so studieren?</p></li>
<li><p>Gelebte Subjektivität in der Mathematik: über die Konstruktion von mathematischen Universen mit nahezu beliebigen Eigenschaften[*]. Du möchtest ein Universum, in dem deine Lieblingsvermutung gilt? Kein Problem! Du möchtest eins, in dem sie nicht gilt? Ebenfalls möglich! Ein Überblick über die vernetzte Struktur des mengentheoretischen Multiversums.</p></li>
<li><p>Möglicherweise können Xave oder andere einen physikalischen Standpunkt ergänzen und über Multiversen in der Physik sprechen.</p></li>
</ul>
<p>Für die Plauderrunde ist keinerlei mathematisches Vorwissen nötig. Begriffe wie Formalismus, Platonismus, Intuitionismus, ZFC und Mengenuniversum werden fallen, aber anschaulich erklärt werden. Bei Interesse können wir auch in Richtung Eliezer Yudkowsky/Metarationalität/Rokos Basilisk abdriften.</p>
</article>
]]></description>
    <pubDate>Thu, 16 May 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-05-16-treffen-50.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Wir bauen einen Typenerschließer</title>
    <link>http://curry-club-augsburg.de/posts/2019-04-17-treffen-49.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Wir bauen einen Typenerschließer</h1>
    <div class="info">
      Gepostet am 17. Apr 19
      
          von iblech
      
    </div>
    
    
  </header>

  <p>Wenn man in Haskell oder anderen Sprachen mit Typenerschließung programmiert, hat man doch, gerade als Anfänger*in, manchmal den Eindruck: Wow! Das ist doch Magie, wie der Compiler hier die ganzen von mir aus Faulheit nicht angegebenen Typen erschließt!</p>
<p>Wir wir alle wissen, ist jede hinreichend fortgeschrittene Technologie ununterscheidbar von Magie, und die hier relevante Technologie ist der Typenerschließungsalgorithmus nach Hindley–Milner.</p>
<p>Zum morgigen Curry Club planen Matthias und Ingo daher eine gemeinsame Programmiersitzung zum Thema:</p>
<pre><code>Wir implementieren einen Typenerschließer</code></pre>
<p>Von Null an bauen wir zunächst einen Interpreter fürs λ-Kalkül. Viele von uns im Curry Club haben das schon tausend Mal gemacht, für viele von uns ist das auch Neuland. Das ist jedenfalls ein schöner Einstieg in das Thema und trägt sicherlich ganz allgemein zum Verständnis von Interpretern, Compilern und Typen bei. Sollte man auf jeden Fall mal gemacht haben!</p>
<p>Anschließend erweitern wir unsere Implementierung um Typenerschließung, indem wir den schon erwähnten Hindley–Milner-Algorithmus umsetzen. Zentral wird dabei das Konzept Unifikation sein.</p>
<p>Wird alles in Ruhe erklärt, informal, formlos und hoffentlich erhellend. Haskell-Vorkenntnisse sind natürlich von Vorteil, aber wenn man Erfahrung mit anderen Sprachen hat und sich traut, Fragen zu stellen, werden wir euch auch so durch den Abend lotsen!</p>
</article>
]]></description>
    <pubDate>Wed, 17 Apr 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-04-17-treffen-49.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Dialogische Logik</title>
    <link>http://curry-club-augsburg.de/posts/2019-03-13-treffen-48.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Dialogische Logik</h1>
    <div class="info">
      Gepostet am 13. Mär 19
      
          von MatthiasHu
      
    </div>
    
    
  </header>

  <p>Dominik wird über dialogische Logik und Dialogspiele vortragen. Dabei handelt es sich um eine Präzisierung der Idee, dass man eine mathematische Aussage nur dann akzeptieren sollte, wenn man jeden noch so kritische Gesprächspartnerin in einem fairen Streitgespräch von ihr überzeugen könnte.</p>
<p>Dialogische Logik ist ein weiterer formaler Ansatz um die Bedeutung logischer Formeln zu charakterisieren. Sie hebt sich von anderen Methoden, wie zum Beispiel Modell-Semantiken und Ableitungssystemen, ab, da sie die interpersonellen Facetten mathematischer Wahrheit explizit macht und somit insbesondere für Intuitionistinnen attraktiv ist. Darüber hinaus hat sie sich auch als ein nützliches technisches Werkzeug entpuppt.</p>
<p>Wir werden sehen, wie Dialoge für Prädikatenlogik erster Stufe aussesehen, warum Dialoge die Lieblingssemantik einer Konstruktivistin sein sollten und was Dominik bis dahin sonst noch Spannendes einfällt.</p>
<p>Wahrscheinlich wird Dominik auch über seine Formalisierung von intuitionistischen Dialogen in Coq berichten.</p>
</article>
]]></description>
    <pubDate>Wed, 13 Mar 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-03-13-treffen-48.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Spaß mit Agda</title>
    <link>http://curry-club-augsburg.de/posts/2019-02-19-treffen-47.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Spaß mit Agda</h1>
    <div class="info">
      Gepostet am 19. Feb 19
      
          von iblech
      
    </div>
    
    
  </header>

  <p>Matthias und Ingo veranstalten eine Agda-Sitzung, sicherlich gespickt mit zahlreichen hintergründigen Kommentaren und Ergänzungen von Makarius.</p>
<p>Was ist Agda? Agda ist eine abhängig typisierte funktionale Programmiersprache und ein Beweisassistent.</p>
<p>Was ist die Verbindung zu Isabelle? Isabelle ist viel, viel größer. Beweisautomatisierung ist in Agda extrem unterentwickelt. Isabelle kann noch viel, viel mehr als nur Beweise zu prüfen. In Isabelle schreibt man standardmäßig Beweistexte, während man in Agda direkt Beweisterme angibt. (Dieser Unterschied wird in der Agda-Sitzung erklärt werden.) Der theoretische Unterbau von Agda ist ein ganz anderer als der von Isabelle/HOL (ein Typensystem mit abhängigen Typen statt HOL). Die Community von Agda nerdet meist konstruktiv ab, während die Community von Isabelle sich meist klassische Logik gönnt. Mit Agda kann man auch Homotopietypentheorie (HoTT) betreiben, mit Isabelle/HOL nicht (wohl aber mit reinem Isabelle). Mit Agda kann man in die wundersame Welt prädikativer Mathematik eintauchen. In Agda gibt es den Begriff “universe polymorphism”, den Ingo persönlich sehr verlockend findet.</p>
<p>Von wem ist Agda? Agda wurde von Catarina Coquand auf den Weg gebracht, der Ehefrau von Thierry Coquand, der wiederum die theoretische Basis zur weiteren Theorembeweiseralternative Coq entwickelte. Wir kennen kein weiteres Ehepaar, das von sich behaupten kann, zwei große Theorembeweiserschulen gegründet zu haben.</p>
<p>Wer kann sich besonders auf die Agda-Sitzung freuen? Jede, die verstehen möchte, inwieweit Beweisen und Programmieren ein und dasselbe sind. Jede, die mehr Erfahrung mit abhängigen Typen sammeln möchte. Jede, die (wie etwa Richi vor einiger Zeit) mal aufschnappte, dass manche Ansammlungen in der Mathematik zu groß sind, um “Mengen” zu bilden und stattdessen nur “echte Klassen” sind, und gerne wüssen würde, was es damit auf sich hat. Jede, die sich über einen einfachen Einstieg in die Welt computergeprüfter Beweise freut.</p>
<p>Welche Voraussetzungen setzt die Agda-Sitzung voraus? Keine außer etwas Vertrautheit mit Programmieren.</p>
</article>
]]></description>
    <pubDate>Tue, 19 Feb 2019 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2019-02-19-treffen-47.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>

    </channel>
</rss>
