<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Curry Club Augsburg</title>
    <link href="http://curry-club-augsburg.de/atom.xml" rel="self" />
    <link href="http://curry-club-augsburg.de" />
    <id>http://curry-club-augsburg.de/atom.xml</id>
    <author>
        <name>Curry Club Augsburg</name>
        <email>post@curry-club-augsburg.de</email>
    </author>
    <updated>2022-08-28T00:00:00Z</updated>
    <entry>
    <title>Thema wird noch gesucht</title>
    <link href="http://curry-club-augsburg.de/posts/2022-08-28-treffen-69.html" />
    <id>http://curry-club-augsburg.de/posts/2022-08-28-treffen-69.html</id>
    <published>2022-08-28T00:00:00Z</published>
    <updated>2022-08-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Thema wird noch gesucht</h1>
    <div class="info">
      Gepostet am 28. Aug 22
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Das Thema vom 28. August steht noch nicht fest.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Datenfluss-Orientierung</title>
    <link href="http://curry-club-augsburg.de/posts/2022-07-31-treffen-68.html" />
    <id>http://curry-club-augsburg.de/posts/2022-07-31-treffen-68.html</id>
    <published>2022-07-31T00:00:00Z</published>
    <updated>2022-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Datenfluss-Orientierung</h1>
    <div class="info">
      Gepostet am 31. Jul 22
      
          von Simon
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Wir haben Wiederauferstehung gefeiert.
Simon stellte ein paar Ideen vor, was datenflussorientierte Programmierung sein könnte. Wir haben über ADFL, kommutierende Monaden und Verfeinerungen von IO diskutiert.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Erlang</title>
    <link href="http://curry-club-augsburg.de/posts/2021-02-25-treffen-67.html" />
    <id>http://curry-club-augsburg.de/posts/2021-02-25-treffen-67.html</id>
    <published>2021-02-25T00:00:00Z</published>
    <updated>2021-02-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Erlang</h1>
    <div class="info">
      Gepostet am 25. Feb 21
      
          von Simon
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Erlang ist eine funktionale, schwach typisierte Programmiersprache, welche besonderes Augenmerk auf Nebenläufigkeit legt.</p>
<p>Anreißer:
* Erlangs Motto ist „let it crash!“. Trotzdem ist das System so konzipiert, dass es über Jahre hinweg ohne Downtimes laufen kann und Code Changes im laufenden Betrieb ermöglicht.
* Das <a href="https://www.youtube.com/watch?v=uKfKtXYLG78">Werbevideo</a> von den Erfindern der Sprache
* Philip Wadler und Simon Marlow haben ein Jahr lang versucht, Erlang ein stärkeres Typsytem zu verpassen und sind damit gescheitert.</p>
<p>Jitsi-Meeting Link: <a href="https://meeting.augsburg.one/aiquogohxaih">https://meeting.augsburg.one/aiquogohxaih</a></p>
</article>
]]></summary>
</entry>
<entry>
    <title>Elm</title>
    <link href="http://curry-club-augsburg.de/posts/2021-01-28-treffen-66.html" />
    <id>http://curry-club-augsburg.de/posts/2021-01-28-treffen-66.html</id>
    <published>2021-01-28T00:00:00Z</published>
    <updated>2021-01-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Elm</h1>
    <div class="info">
      Gepostet am 28. Jan 21
      
          von Lukas
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Nachdem es zuletzt um low-level Programmierung im Browser mit WebAssembly ging, steht
für dieses Treffen das andere Ende des Spektrums auf dem Plan:
Fabian Huch wird uns <a href="https://elm-lang.org/">Elm</a> vorstellen, eine
statisch typisierte, funktionale Programmiersprache für Webentwicklung.</p>
<p>Teilnehmen kann man über <a href="https://meeting.augsburg.one/aiquogohxaih">diesen Jitsi-Link</a>.
Benötigt wird dazu lediglich ein moderner Web-Browser (gerüchteweise ist Performance
mit Chrome/Chromium besser als mit Firefox).</p>
</article>
]]></summary>
</entry>
<entry>
    <title>WebAssembly — Systemprogrammierung im Browser</title>
    <link href="http://curry-club-augsburg.de/posts/2021-01-21-treffen-65.html" />
    <id>http://curry-club-augsburg.de/posts/2021-01-21-treffen-65.html</id>
    <published>2021-01-21T00:00:00Z</published>
    <updated>2021-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>WebAssembly — Systemprogrammierung im Browser</h1>
    <div class="info">
      Gepostet am 21. Jan 21
      
          von Lukas
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Cornelius Diekmann wird uns in die Semantik der
<a href="https://webassembly.org/">WebAssembly</a>-Stack-Maschine einführen und sie auch
im Text-Format <code>wat</code> programmieren. Anschließend soll auch mit der Welt
interagiert werden: Wir werden WebAssembly-IO im Browser sehen und,
wenn noch Zeit bleibt, Rust nach WebAssembly kompilieren und auch
mit dieser Sprache mit den Browser-APIs interagieren.</p>
<p>Um am Treffen teilzunehmen reicht ein Klick auf den <a href="https://meeting.augsburg.one/eobohpheraiveicaefoe">Jitsi-Meeting-Link</a>.
Es ist keine Installation von Zusatzsoftware nötig, ein moderner Webbrowser genügt.</p>
<p>Cornelius hat auch
<a href="https://github.com/diekmann/wasm-fizzbuzz">FizzBuzz in WebAssembly</a>
implementiert
und dabei viele der Einsichten aus dem Vortrag zum Nachlesen festgehalten.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Slate, ein webbasierter Beweisassistent</title>
    <link href="http://curry-club-augsburg.de/posts/2020-12-09-treffen-64.html" />
    <id>http://curry-club-augsburg.de/posts/2020-12-09-treffen-64.html</id>
    <published>2020-12-09T00:00:00Z</published>
    <updated>2020-12-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Slate, ein webbasierter Beweisassistent</h1>
    <div class="info">
      Gepostet am  9. Dez 20
      
          von Tim
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Sebastian Reichelt wird uns seinen in Entwicklung befindlichen interaktiven Beweisassistenten <a href="https://slate-prover.org/">Slate</a> vorstellen. Das besondere an diesem Beweisassistenten ist, dass man Theoreme und Beweise nicht in einem Texteditor schreibt, sondern in einer webbasierten Oberfläche konstruiert.</p>
<p>Um am Treffen teilzunehmen reicht ein Klick auf den <a href="https://meeting.sketis.net/Iy1eeke2eS">Jitsi-Meeting-Link</a>. Es ist keine Installation von Zusatzsoftware nötig, ein moderner Webbrowser genügt.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>String-Diagramme</title>
    <link href="http://curry-club-augsburg.de/posts/2020-12-03-treffen-63.html" />
    <id>http://curry-club-augsburg.de/posts/2020-12-03-treffen-63.html</id>
    <published>2020-12-03T00:00:00Z</published>
    <updated>2020-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>String-Diagramme</h1>
    <div class="info">
      Gepostet am  3. Dez 20
      
          von Simon
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Matthias hat eine Art kleine (winzige) Bibliothek für String-Diagramme in Agda geschrieben. Das war nicht geplant, aber es hat so gut funktioniert, dass er gerne mit allen, die es interessiert, ein bisschen darüber reden würde.</p>
<p>Was sind String-Diagramme?
Für mich sind String-Diagramme eine angenehme Notation für natürliche Transformationen zwischen Funktoren. (Oder allgemeiner für 2-Zellen zwischen 1-Zellen einer beliebigen 2-Kategorie.) Man zeichnet dabei Funktoren als senkrechte Linien (Strings) und natürliche Transformationen als Verzweigungspunkte. Damit kann man zum Beispiel extrem angenehm beweisen, dass jede Adjunktion eine Monade induziert.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Direkt ins Sangam</title>
    <link href="http://curry-club-augsburg.de/posts/2020-09-30-treffen-62.html" />
    <id>http://curry-club-augsburg.de/posts/2020-09-30-treffen-62.html</id>
    <published>2020-09-30T00:00:00Z</published>
    <updated>2020-09-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Direkt ins Sangam</h1>
    <div class="info">
      Gepostet am 30. Sep 20
      
          von Tim
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Da es auch dieses Mal keine Vortragseinreichungen gab, treffen wir uns direkt um
21:00 (!) Uhr im <a href="https://www.restaurant-sangam-augsburg.de/">Restaurant Sangam</a>.</p>
<p>Jeder, der kommen möchte, wird gebeten, sich zwecks Reservierung bis 17:00
Uhr am Tag des Treffens auf der Mailingliste oder per Mail an
<a href="mailto:tim@timbaumann.info">tim@timbaumann.info</a> anzumelden.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Direkt ins Sangam</title>
    <link href="http://curry-club-augsburg.de/posts/2020-09-01-treffen-61.html" />
    <id>http://curry-club-augsburg.de/posts/2020-09-01-treffen-61.html</id>
    <published>2020-09-01T00:00:00Z</published>
    <updated>2020-09-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Direkt ins Sangam</h1>
    <div class="info">
      Gepostet am  1. Sep 20
      
          von Tim
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Da es dieses Mal keine Vortragseinreichungen gab, treffen wir uns direkt um
20:00 (!) Uhr im <a href="https://www.restaurant-sangam-augsburg.de/">Restaurant Sangam</a>.</p>
<p>Jeder, der kommen möchte, wird gebeten, sich zwecks Reservierung bis 17:00
Uhr am Tag des Treffens auf der Mailingliste oder per Mail an
<a href="mailto:tim@timbaumann.info">tim@timbaumann.info</a> anzumelden.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Kripke-Semantik</title>
    <link href="http://curry-club-augsburg.de/posts/2020-08-06-treffen-60.html" />
    <id>http://curry-club-augsburg.de/posts/2020-08-06-treffen-60.html</id>
    <published>2020-08-06T00:00:00Z</published>
    <updated>2020-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Kripke-Semantik</h1>
    <div class="info">
      Gepostet am  6. Aug 20
      
          von Simon
      
    </div>
    <figure>
      
      
    </figure>
  </header>

  <p>Kripke-Semantik verfolgt das Ziel, modale Logiken mithilfe einer Art Universum von möglichen Welten zu modellieren und kommt der entsprechenden intuitiven Vorstellung ziemlich nahe.</p>
<p>Simon gab nach einer kurzen Rückschau zunächst eine kleine Einführung in Kripke-Semantik.
Anschließend stellte er einen Aufschrieb des ganzen im Curry-Howard-Stil in Haskell vor, inklusive Beweis der Korrespondenzen zwischen Axiomenschemata und Eigenschaften der Weltzugänglichkeitsrelation.</p>
<h2 id="skript">Skript</h2>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RankNTypes, ScopedTypeVariables, GADTs, TypeOperators,</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    TypeFamilies,  UndecidableInstances, StandaloneDeriving #-}</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Void</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- https://en.wikipedia.org/wiki/Kripke_semantics</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">-- Kripkes Welten sind nur eine Menge, ohne weitere Struktur</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">World</span> w</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">W_Hask</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">W_IO</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">W_ahrheit</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">World</span> <span class="dt">W_Hask</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">World</span> <span class="dt">W_IO</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">World</span> <span class="dt">W_ahrheit</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="co">-- Anmerkung: Die Klasse World kann man auch weg lassen</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- wenn man will, kann man Welt-Datentypen auch durch so was wie</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="co">-- data World a</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="co">-- kennzeichnen</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="co">-- Weltrahmen, Liste aller Elemente der Weltrelation</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Frame</span> w v <span class="kw">where</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">IO_R_Hask</span><span class="ot"> ::</span> <span class="dt">Frame</span> <span class="dt">W_IO</span> <span class="dt">W_Hask</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">W_R_W</span><span class="ot"> ::</span> <span class="dt">World</span> w <span class="ot">=&gt;</span> <span class="dt">Frame</span> w w</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="kw">deriving</span> <span class="kw">instance</span> <span class="dt">Show</span> (<span class="dt">Frame</span> w v)</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="co">-- Eigenschaften des Weltrahmens</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Reflexive</span> frame <span class="ot">=</span> <span class="kw">forall</span> w<span class="op">.</span> <span class="dt">World</span> w <span class="ot">=&gt;</span> frame w w</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Symmetric</span> frame <span class="ot">=</span> <span class="kw">forall</span> w v<span class="op">.</span> frame w v <span class="ot">-&gt;</span> frame v w</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Transitive</span> frame <span class="ot">=</span> <span class="kw">forall</span> w v z<span class="op">.</span> frame w v <span class="ot">-&gt;</span> frame v z <span class="ot">-&gt;</span> frame w z</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Euclidean</span> frame <span class="ot">=</span> <span class="kw">forall</span> w v z<span class="op">.</span> frame w v <span class="ot">-&gt;</span> frame w z <span class="ot">-&gt;</span> frame v z</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a><span class="co">-- In unserem Beispiel</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a><span class="ot">reflexive_Frame ::</span> <span class="dt">Reflexive</span> <span class="dt">Frame</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>reflexive_Frame <span class="ot">=</span> <span class="dt">W_R_W</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a><span class="ot">transitive_Frame ::</span> <span class="dt">Transitive</span> <span class="dt">Frame</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>transitive_Frame <span class="dt">W_R_W</span> wRv <span class="ot">=</span> wRv</span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>transitive_Frame vRw <span class="dt">W_R_W</span> <span class="ot">=</span> vRw</span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a><span class="co">-- Symbole Pos, Nec, Verneinung und Folgerung</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pos</span> a</span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Nec</span> a</span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Not</span> a</span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">1</span> <span class="op">:-&gt;</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> a <span class="op">:-&gt;</span> b</span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a><span class="co">-- Die Axiome des Kripke-Modells als (geschlossene) type family</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a><span class="co">-- Dies erlaubt pattern matching auf Typebene</span></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">KripkeModel</span> it w form  <span class="kw">where</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>    <span class="dt">KripkeModel</span> it w (<span class="dt">Not</span> a) <span class="ot">=</span> <span class="dt">KripkeModel</span> it w a <span class="ot">-&gt;</span> <span class="dt">Void</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>    <span class="dt">KripkeModel</span> it w (a <span class="op">:-&gt;</span> b) <span class="ot">=</span> <span class="dt">KripkeModel</span> it w a <span class="ot">-&gt;</span> <span class="dt">KripkeModel</span> it w b</span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>    <span class="dt">KripkeModel</span> it w (<span class="dt">Pos</span> a) <span class="ot">=</span> <span class="dt">PosTransform</span> it w a</span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>    <span class="dt">KripkeModel</span> it w (<span class="dt">Nec</span> a) <span class="ot">=</span> <span class="dt">NecTransform</span> it w a</span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>    <span class="dt">KripkeModel</span> it w a <span class="ot">=</span> <span class="dt">Interpretation</span> it w a</span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Interpretation</span> it world a</span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">I_Bsp</span></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Interpretation</span> <span class="dt">I_Bsp</span>  <span class="dt">W_IO</span>   a <span class="ot">=</span> <span class="dt">IO</span> a</span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Interpretation</span> <span class="dt">I_Bsp</span>  <span class="dt">W_Hask</span> a <span class="ot">=</span> a</span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a><span class="co">-- Die Transformierten sind als Wrapper zu sehen</span></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">NecTransform</span> it w a <span class="ot">=</span> <span class="dt">Nec</span> {</span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a><span class="ot">    nectransfrom ::</span> <span class="kw">forall</span> v<span class="op">.</span> <span class="dt">Frame</span> w v <span class="ot">-&gt;</span> <span class="dt">KripkeModel</span> it v a }</span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">PosTransform</span> it w a <span class="kw">where</span></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Pos</span><span class="ot"> ::</span> <span class="dt">Frame</span> w v <span class="ot">-&gt;</span> <span class="dt">KripkeModel</span> it v a <span class="ot">-&gt;</span> <span class="dt">PosTransform</span> it w a</span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a><span class="co">-- Die modallogischen Schlußregeln als Typen</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Extract</span> w <span class="ot">=</span> <span class="kw">forall</span> it a<span class="op">.</span> <span class="dt">KripkeModel</span> it w (<span class="dt">Nec</span> a <span class="op">:-&gt;</span> a)</span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Pure</span> w    <span class="ot">=</span> <span class="kw">forall</span> it a<span class="op">.</span> <span class="dt">KripkeModel</span> it w (a <span class="op">:-&gt;</span> <span class="dt">Pos</span> a)</span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Duplicate</span> <span class="ot">=</span> <span class="kw">forall</span> it w a<span class="op">.</span> <span class="dt">KripkeModel</span> it w (<span class="dt">Nec</span> a <span class="op">:-&gt;</span> <span class="dt">Nec</span> (<span class="dt">Nec</span> a))</span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Join</span>      <span class="ot">=</span> <span class="kw">forall</span> it w a<span class="op">.</span> <span class="dt">KripkeModel</span> it w (<span class="dt">Pos</span> (<span class="dt">Pos</span> a) <span class="op">:-&gt;</span> <span class="dt">Pos</span> a)</span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Brouwer</span>   <span class="ot">=</span> <span class="kw">forall</span> it w a<span class="op">.</span> <span class="dt">KripkeModel</span> it w (a <span class="op">:-&gt;</span> <span class="dt">Nec</span> (<span class="dt">Pos</span> a))</span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">S5</span>        <span class="ot">=</span> <span class="kw">forall</span> it w a<span class="op">.</span> <span class="dt">KripkeModel</span> it w (<span class="dt">Pos</span> a <span class="op">:-&gt;</span> <span class="dt">Nec</span> (<span class="dt">Pos</span> a))</span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a><span class="co">-- Nun zu den Äquivalenzen Schlußregel &lt;=&gt; Weltrahmenbedingung</span></span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a><span class="co">-- Hilfsdefinitionen</span></span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a><span class="co">-- Spezial-Variable () wird bei Spezialinterpretation I_CheckFrame w</span></span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a><span class="co">-- in der Welt v interpretiert als: wRv</span></span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">I_CheckFrame</span> w</span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Interpretation</span> (<span class="dt">I_CheckFrame</span> w) v () <span class="ot">=</span> <span class="dt">Frame</span> w v</span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a><span class="co">-- Variable () wird bei Spezialinterpretation I_ConcludeFrame w z</span></span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a><span class="co">-- in der Welt v interpretiert als: wRv bedingt wRz</span></span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">I_ConcludeFrame</span> w z</span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Interpretation</span> (<span class="dt">I_ConcludeFrame</span> w z) v () <span class="ot">=</span> <span class="dt">Frame</span> w v <span class="ot">-&gt;</span> <span class="dt">Frame</span> w z</span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a><span class="co">-- conclusive_apply :: wRv , (wRv -&gt; wRz) =&gt; wRz</span></span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a><span class="co">-- ist modus ponens angewandt auf Pos</span></span>
<span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a><span class="ot">conclusive_apply ::</span> <span class="dt">PosTransform</span> (<span class="dt">I_ConcludeFrame</span> w z) w () <span class="ot">-&gt;</span> <span class="dt">Frame</span> w z</span>
<span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>conclusive_apply (<span class="dt">Pos</span> wRv h) <span class="ot">=</span> h wRv</span>
<span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a><span class="co">-- Hier die eigentlichen Äquivalenzen:</span></span>
<span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a><span class="co">-- Pure ist äquivalent zu Reflexive Frame</span></span>
<span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a><span class="ot">reflexive_is_pure ::</span> (<span class="dt">World</span> w) <span class="ot">=&gt;</span> <span class="dt">Reflexive</span> <span class="dt">Frame</span> <span class="ot">-&gt;</span> <span class="dt">Pure</span> w</span>
<span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>reflexive_is_pure <span class="ot">=</span> <span class="dt">Pos</span></span>
<span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a><span class="co">-- pure_is_reflexive :: (World w) =&gt; (Pure w) -&gt; Reflexive Frame</span></span>
<span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a><span class="co">-- Die Typsignatur müssen wir weglassen</span></span>
<span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>pure_is_reflexive (<span class="ot">axiom ::</span> <span class="dt">Pure</span> w) <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>    p <span class="ot">=</span> axiom <span class="fu">id</span></span>
<span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> conclusive_apply p</span>
<span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a><span class="co">-- Extract ist äquivalent zu Reflexive Frame</span></span>
<span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a><span class="ot">reflexive_is_extract ::</span> (<span class="dt">World</span> w) <span class="ot">=&gt;</span> <span class="dt">Reflexive</span> <span class="dt">Frame</span> <span class="ot">-&gt;</span> <span class="dt">Extract</span> w</span>
<span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a>reflexive_is_extract wrw (<span class="dt">Nec</span> necif) <span class="ot">=</span> necif wrw</span>
<span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a><span class="co">--extract_is_reflexive&#39; :: (World w) =&gt; Extract w -&gt; Reflexive Frame</span></span>
<span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>extract_is_reflexive (<span class="ot">axiom ::</span> <span class="dt">Extract</span> w) <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>    nt <span class="ot">=</span> <span class="dt">Nec</span><span class="ot"> id ::</span> <span class="dt">NecTransform</span> (<span class="dt">I_CheckFrame</span> w) w ()</span>
<span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> axiom nt</span>
<span id="cb1-123"><a href="#cb1-123" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-124"><a href="#cb1-124" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-125"><a href="#cb1-125" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-126"><a href="#cb1-126" aria-hidden="true" tabindex="-1"></a><span class="ot">transitive_is_duplicate ::</span> <span class="dt">Transitive</span> <span class="dt">Frame</span> <span class="ot">-&gt;</span> <span class="dt">Duplicate</span></span>
<span id="cb1-127"><a href="#cb1-127" aria-hidden="true" tabindex="-1"></a>transitive_is_duplicate trans (<span class="dt">Nec</span> f_to_m) <span class="ot">=</span></span>
<span id="cb1-128"><a href="#cb1-128" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nec</span> (\rel1 <span class="ot">-&gt;</span> <span class="dt">Nec</span> (\rel2 <span class="ot">-&gt;</span> f_to_m (trans rel1 rel2)))</span>
<span id="cb1-129"><a href="#cb1-129" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-130"><a href="#cb1-130" aria-hidden="true" tabindex="-1"></a><span class="ot">duplicate_is_transitive ::</span> <span class="dt">Duplicate</span> <span class="ot">-&gt;</span> <span class="dt">Transitive</span> <span class="dt">Frame</span></span>
<span id="cb1-131"><a href="#cb1-131" aria-hidden="true" tabindex="-1"></a>duplicate_is_transitive (<span class="ot">duplicator ::</span> <span class="dt">Duplicate</span>) <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb1-132"><a href="#cb1-132" aria-hidden="true" tabindex="-1"></a>    nt <span class="ot">=</span> <span class="dt">Nec</span><span class="ot"> id  ::</span> <span class="kw">forall</span> w<span class="op">.</span> <span class="dt">NecTransform</span> (<span class="dt">I_CheckFrame</span> w) w ()</span>
<span id="cb1-133"><a href="#cb1-133" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nec</span> f1 <span class="ot">=</span> duplicator nt</span>
<span id="cb1-134"><a href="#cb1-134" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> \rel1 <span class="ot">-&gt;</span> <span class="kw">let</span></span>
<span id="cb1-135"><a href="#cb1-135" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Nec</span> f2 <span class="ot">=</span> f1 rel1</span>
<span id="cb1-136"><a href="#cb1-136" aria-hidden="true" tabindex="-1"></a>        <span class="kw">in</span> f2</span>
<span id="cb1-137"><a href="#cb1-137" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-138"><a href="#cb1-138" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-139"><a href="#cb1-139" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-140"><a href="#cb1-140" aria-hidden="true" tabindex="-1"></a><span class="ot">transitive_is_join ::</span> <span class="dt">Transitive</span> <span class="dt">Frame</span> <span class="ot">-&gt;</span> <span class="dt">Join</span></span>
<span id="cb1-141"><a href="#cb1-141" aria-hidden="true" tabindex="-1"></a>transitive_is_join trans (<span class="dt">Pos</span> wRv (<span class="dt">Pos</span> vRz a)) <span class="ot">=</span> <span class="dt">Pos</span> (trans wRv vRz) a</span>
<span id="cb1-142"><a href="#cb1-142" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-143"><a href="#cb1-143" aria-hidden="true" tabindex="-1"></a><span class="ot">join_is_transitive ::</span> <span class="dt">Join</span> <span class="ot">-&gt;</span> <span class="dt">Transitive</span> <span class="dt">Frame</span></span>
<span id="cb1-144"><a href="#cb1-144" aria-hidden="true" tabindex="-1"></a>join_is_transitive joinator (<span class="ot">wRv ::</span> <span class="dt">Frame</span> w v) (<span class="ot">vRz ::</span> <span class="dt">Frame</span> v z) <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb1-145"><a href="#cb1-145" aria-hidden="true" tabindex="-1"></a>    p2 <span class="ot">=</span> joinator (<span class="dt">Pos</span> wRv (<span class="dt">Pos</span> vRz <span class="fu">id</span>))</span>
<span id="cb1-146"><a href="#cb1-146" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> conclusive_apply p2</span>
<span id="cb1-147"><a href="#cb1-147" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-148"><a href="#cb1-148" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-149"><a href="#cb1-149" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-150"><a href="#cb1-150" aria-hidden="true" tabindex="-1"></a><span class="ot">symmetric_is_brouwer ::</span> <span class="dt">Symmetric</span> <span class="dt">Frame</span> <span class="ot">-&gt;</span> <span class="dt">Brouwer</span></span>
<span id="cb1-151"><a href="#cb1-151" aria-hidden="true" tabindex="-1"></a>symmetric_is_brouwer sym form <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb1-152"><a href="#cb1-152" aria-hidden="true" tabindex="-1"></a><span class="ot">    assertPos ::</span> <span class="dt">KripkeModel</span> it w a <span class="ot">-&gt;</span> <span class="dt">Frame</span> w v <span class="ot">-&gt;</span> <span class="dt">PosTransform</span> it v a</span>
<span id="cb1-153"><a href="#cb1-153" aria-hidden="true" tabindex="-1"></a>    assertPos form wRv <span class="ot">=</span> <span class="dt">Pos</span> (sym wRv) form</span>
<span id="cb1-154"><a href="#cb1-154" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> <span class="dt">Nec</span> (assertPos form)</span>
<span id="cb1-155"><a href="#cb1-155" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-156"><a href="#cb1-156" aria-hidden="true" tabindex="-1"></a><span class="ot">brouwer_is_symmetric ::</span> <span class="dt">Brouwer</span> <span class="ot">-&gt;</span> <span class="dt">Symmetric</span> <span class="dt">Frame</span></span>
<span id="cb1-157"><a href="#cb1-157" aria-hidden="true" tabindex="-1"></a>brouwer_is_symmetric brouwerei wRv <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb1-158"><a href="#cb1-158" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nec</span> f <span class="ot">=</span> brouwerei <span class="fu">id</span></span>
<span id="cb1-159"><a href="#cb1-159" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> conclusive_apply (f wRv)</span>
<span id="cb1-160"><a href="#cb1-160" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-161"><a href="#cb1-161" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-162"><a href="#cb1-162" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-163"><a href="#cb1-163" aria-hidden="true" tabindex="-1"></a><span class="ot">euclidean_is_s5 ::</span> <span class="dt">Euclidean</span> <span class="dt">Frame</span> <span class="ot">-&gt;</span> <span class="dt">S5</span></span>
<span id="cb1-164"><a href="#cb1-164" aria-hidden="true" tabindex="-1"></a>euclidean_is_s5 euclid <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb1-165"><a href="#cb1-165" aria-hidden="true" tabindex="-1"></a><span class="ot">    assertPos ::</span> <span class="dt">Frame</span> w v <span class="ot">-&gt;</span> <span class="dt">KripkeModel</span> it v a <span class="ot">-&gt;</span> <span class="dt">Frame</span> w z <span class="ot">-&gt;</span> <span class="dt">PosTransform</span> it z a</span>
<span id="cb1-166"><a href="#cb1-166" aria-hidden="true" tabindex="-1"></a>    assertPos wRv form wRz <span class="ot">=</span> <span class="dt">Pos</span> (euclid wRz wRv) form</span>
<span id="cb1-167"><a href="#cb1-167" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> \(<span class="dt">Pos</span> wRv form) <span class="ot">-&gt;</span> <span class="dt">Nec</span> (assertPos wRv form)</span>
<span id="cb1-168"><a href="#cb1-168" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-169"><a href="#cb1-169" aria-hidden="true" tabindex="-1"></a><span class="ot">s5_is_euclidean ::</span> <span class="dt">S5</span> <span class="ot">-&gt;</span> <span class="dt">Euclidean</span> <span class="dt">Frame</span></span>
<span id="cb1-170"><a href="#cb1-170" aria-hidden="true" tabindex="-1"></a>s5_is_euclidean s5 wRv wRz <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb1-171"><a href="#cb1-171" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nec</span> f <span class="ot">=</span> s5 (<span class="dt">Pos</span> wRz <span class="fu">id</span>)</span>
<span id="cb1-172"><a href="#cb1-172" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> conclusive_apply (f wRv)</span></code></pre></div>
</article>
]]></summary>
</entry>

</feed>
